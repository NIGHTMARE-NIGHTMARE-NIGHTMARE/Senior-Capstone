version: "3.1"

intents:
  - greet
  - goodbye
  - affirm
  - deny
  - bot_challenge
  - out_of_scope
  - choose_category
  - select_algorithm

entities:
  - category
  - algorithm

responses:
  utter_goodbye:
    - text: "Goodbye! If you have any more questions, feel free to ask."
    - text: "See ya! I am always here if you have more questions"
    - text: "Nice talking to you! If you want to learn more, you know where to find me."

  utter_i_am_a_bot:
    - text: "I am a bot. I am doing the best I can..."
    - text: "I am a bot. You need to relax..."
    - text: "Look, I am a simple bot. You know this already..."

  utter_out_of_scope:
    - text: "That is out of the scope of this lesson. Please get back on track you slacker."
    - text: "Looks like you are a little off topic. How about you lock back in?"
    - text: "You know it's not my job to talk about things besides algorithms. You really want to keep trying? Get back to what I said."

  utter_search:
    - text: "The definition of search algorithm can be described as: ^A procedure that navigates through a collection of elements, such as an array or a tree, to locate a particular value or determine its nonexistence. The algorithm's efficiency is measured based on factors such as time complexity and space complexity.^Here are some search algorithms: \n\t- Linear Search\n\t- Binary Search\n\t- Bredth First Search (BFS)\n\t- Depth First Search (DFS) \nPlease select one to start!"

  utter_sort:
    - text: "The definition of sort algorithm can be described as: ^A computational technique designed to rearrange elements within a data structure in a specified order. It involves comparing elements and swapping their positions based on defined comparison rules to achieve sorted output.^Here are some sort algorithms:\n\t- Quicksort\n\t- Heap Sort\n\t- Merge Sort\n\t- Bubble Sort\n\t- Insertion Sort \nPlease select one to start!"

  utter_linear_def:
    - text: "Linear Search can be defined as:^A straightforward searching algorithm that scans through a collection of elements in a sequential manner, comparing each element with the target value until a match is found or the end of the list is reached.^Would you like to see pseudocode?"
  utter_linear_code:
    - text: "Here is the pseudocode:\n^Do you want to see a visual of the search?"
      image: "https://miro.medium.com/v2/resize:fit:1400/1*vaVmPAMpElIKI6QgYD5QBg.png"
  utter_linear_visual:
    - text: "This should help visualize how it works: .^Would you like to see additional resources?"
      image: "https://www.tutorialspoint.com/data_structures_algorithms/images/linear_search.gif"
  utter_linear_resources:
    - text: "Here are some additional resources for linear search algorithms:\n\t- https://www.geeksforgeeks.org/linear-search/ \n\t- https://www.programiz.com/dsa/linear-search ^That is all the information I currently have for linear search algorithms. If there are any other algorithms I can help you with, feel free to ask! See ya!"

  utter_quicksort_def:
    - text: "Quicksort can be defined as:^A comparison-based sorting algorithm that follows the divide-and-conquer paradigm. The algorithm works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted. This process continues until the entire array is sorted.^Wanna see how the code works?"
  utter_quicksort_code:
    - text: "This is a code example.^Would you like a visual demonstration?"
      image: "https://www.researchgate.net/publication/332434596/figure/fig1/AS:749266318417921@1555650419190/Pseudocode-of-quicksort-adapted-from-1.png"
  utter_quicksort_visual:
    - text: "This example visually demonstrates how it works: ^Would you like some external resources?"
      image: "https://assets.datacamp.com/production/repositories/6071/datasets/85c3812b5d35b783cddd8e53f51c8575b5a55b90/quicksort_helper.gif"
  utter_quicksort_resources:
    - text: "These are some helpful links to learn about the quicksort algorithm:\n\t- https://www.geeksforgeeks.org/quick-sort/\n\t- https://www.programiz.com/dsa/quick-sort ^That's all I've got today for quicksort. I'm always here if you want to learn about another algorithm! Talk to you later!"

  utter_bubble_def:
    - text: "Bubble Sort can be defined as:^A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm gets its name from the way smaller or larger elements \"bubble up\" to the top of the list.^Should I go over a code example?"


slots:
  category:
    type: text
    mappings:
      - type: from_entity
        entity: category
  algorithm:
    type: text
    mappings:
      - type: from_entity
        entity: algorithm

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true
